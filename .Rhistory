df_fun <- data.frame(x=X, fun = rep(as.factor(target_models$ID), each = 100))
values <- c()
for (id in target_models$ID){
model=target_models[target_models$ID==id,]
constant <-data[data$ID==id,]$value[1]
for (x in X){
values <- c(values,
model_function(x, model$class, constant, model$Intercept, model$slope, model$b, model$c, model$d, model$e))
}
}
df_fun <- cbind(df_fun, values)
# Plot
plot <- ggplot()
for (id in target_models$ID){
plot <- plot + geom_line(data=filter(df_fun, fun==id), aes(x, values, color = fun))
}
plot <- plot +
geom_point(data=data, aes(x=dose, y=value, color=ID)) +
xlab(target_drug) +
ylab(target_feature)
return(plot)
}
plot_individual_models("CD56hiCD16negNK_STAT1_IFNa","Chlorthalidone")
plot_median_model("Bcells_CREB_IFNa","Clotrimazole")
rep(c(1, 2, 3), 3)
plot_individual_models <- function(target_feature, target_drug, model_list=hand.log10_1.individual.model){
# Selecting a specific model
target_models <- subset(model_list,
feature == target_feature & drug == target_drug)
# Setting the dose values to their log10(x+1) transform
data <- AllPenDoseresponse %>%
dplyr::mutate(dose = log10_1_dose,
ID = as.factor(ID)) %>%
dplyr::filter(is.finite(dose),
feature == target_feature,
drug == target_drug) %>%
dplyr::select(ID, dose, value)
# Dataframe containing the function values on [min(dose), max(dose)]
X = seq(min(data$dose), max(data$dose), length.out=100)
df_fun <- data.frame(x=rep(X, length(unique(target_models$ID))), fun = rep(as.factor(target_models$ID), each = 100))
values <- c()
for (id in target_models$ID){
model=target_models[target_models$ID==id,]
constant <-data[data$ID==id,]$value[1]
for (x in X){
values <- c(values,
model_function(x, model$class, constant, model$Intercept, model$slope, model$b, model$c, model$d, model$e))
}
}
df_fun <- cbind(df_fun, values)
# Plot
plot <- ggplot()
for (id in target_models$ID){
plot <- plot + geom_line(data=filter(df_fun, fun==id), aes(x, values, color = fun))
}
plot <- plot +
geom_point(data=data, aes(x=dose, y=value, color=ID)) +
xlab(target_drug) +
ylab(target_feature)
return(plot)
}
plot_individual_models("CD56hiCD16negNK_STAT1_IFNa","Chlorthalidone")
plot_median_model("Bcells_CREB_IFNa","Clotrimazole")
target_feature="CD56hiCD16negNK_STAT1_IFNa"
target_drug="Chlorthalidone"
model_list=hand.log10_1.median.model
model_list
# Selecting a specific model
target_models <- subset(model_list,
feature == target_feature & drug == target_drug)
target_models
# Setting the dose values to their log10(x+1) transform
data <- AllPenDoseresponse %>%
dplyr::mutate(dose = log10_1_dose,
ID = as.factor(ID)) %>%
dplyr::filter(is.finite(dose),
feature == target_feature,
drug == target_drug) %>%
dplyr::select(ID, dose, value)
data
# Dataframe containing the function values on [min(dose), max(dose)]
X = seq(min(data$dose), max(data$dose), length.out=100)
X
df_fun <- data.frame(x=rep(X, length(unique(target_models$ID))), fun = rep(as.factor(target_models$ID), each = 100))
df_fun
model_list=hand.log10_1.individual.model
# Selecting a specific model
target_models <- subset(model_list,
feature == target_feature & drug == target_drug)
target_models
# Setting the dose values to their log10(x+1) transform
data <- AllPenDoseresponse %>%
dplyr::mutate(dose = log10_1_dose,
ID = as.factor(ID)) %>%
dplyr::filter(is.finite(dose),
feature == target_feature,
drug == target_drug) %>%
dplyr::select(ID, dose, value)
# Dataframe containing the function values on [min(dose), max(dose)]
X = seq(min(data$dose), max(data$dose), length.out=100)
df_fun <- data.frame(x=rep(X, length(unique(target_models$ID))), fun = rep(as.factor(target_models$ID), each = 100))
df_fun
values <- c()
for (id in target_models$ID){
model=target_models[target_models$ID==id,]
constant <-data[data$ID==id,]$value[1]
for (x in X){
values <- c(values,
model_function(x, model$class, constant, model$Intercept, model$slope, model$b, model$c, model$d, model$e))
}
}
df_fun <- cbind(df_fun, values)
df_fun
# Define functions for the different class of models
model_function <- function(x, model_class, constant, Intercept, slope, b, c, d, e) {
if (model_class=="sigmoid" || model_class=="constant.sigmoid") {
return(c + (d - c) / (1 + exp(-b * (x - e))))
} else {
return(NULL)
}
}
values <- c()
constant <-median(data[data$ID==1,]$value)
for (x in X){
values <- c(values,
model_function(x, target_model$class, constant, target_model$Intercept, target_model$slope, target_model$b, target_model$c, target_model$d, target_model$e))
}
values <- c()
for (id in target_models$ID){
model=target_models[target_models$ID==id,]
constant <-data[data$ID==id,]$value[1]
for (x in X){
values <- c(values,
model_function(x, model$class, constant, model$Intercept, model$slope, model$b, model$c, model$d, model$e))
}
}
df_fun <- cbind(df_fun, values)
df_fun
# Plot
plot <- ggplot()
for (id in target_models$ID){
plot <- plot + geom_line(data=filter(df_fun, fun==id), aes(x, values, color = fun))
}
plot <- plot + geom_line(data=dplyr::filter(df_fun, fun==id), aes(x, values, color = fun))
dplyr::filter(df_fun, fun==id)
df_fun
plot_individual_models <- function(target_feature, target_drug, model_list=hand.log10_1.individual.model){
# Selecting a specific model
target_models <- subset(model_list,
feature == target_feature & drug == target_drug)
# Setting the dose values to their log10(x+1) transform
data <- AllPenDoseresponse %>%
dplyr::mutate(dose = log10_1_dose,
ID = as.factor(ID)) %>%
dplyr::filter(is.finite(dose),
feature == target_feature,
drug == target_drug) %>%
dplyr::select(ID, dose, value)
# Dataframe containing the function values on [min(dose), max(dose)]
X = seq(min(data$dose), max(data$dose), length.out=100)
df_fun <- data.frame(x=rep(X, length(unique(target_models$ID))), fun = rep(as.factor(target_models$ID), each = 100))
values <- c()
for (id in target_models$ID){
model=target_models[target_models$ID==id,]
constant <-data[data$ID==id,]$value[1]
for (x in X){
values <- c(values,
model_function(x, model$class, constant, model$Intercept, model$slope, model$b, model$c, model$d, model$e))
}
}
df_fun <- cbind(df_fun, values)
# Plot
plot <- ggplot()
for (id in target_models$ID){
plot <- plot + geom_line(data=filter(df_fun, fun==id), aes(x, values, color = fun))
}
plot <- plot +
geom_point(data=data, aes(x=dose, y=value, color=ID)) +
xlab(target_drug) +
ylab(target_feature)
return(plot)
}
plot_median_model <- function(target_feature, target_drug, model_list=hand.log10_1.median.model){
# Selecting a specific model
target_model <- subset(model_list,
feature == target_feature & drug == target_drug)
# Setting the dose values to their pseudo log transform
data <- AllPenDoseresponse %>%
dplyr::mutate(dose = log10_1_dose,
ID = as.factor(ID)) %>%
dplyr::filter(is.finite(dose),
feature == target_feature,
drug == target_drug) %>%
dplyr::select(ID, dose, value)
# Dataframe containing the function values on [min(dose), max(dose)]
X = seq(min(data$dose)-0.1, max(data$dose)+0.1, length.out=100)
df_fun <- data.frame(x=X)
values <- c()
constant <-median(data[data$ID==1,]$value)
for (x in X){
values <- c(values,
model_function(x, target_model$class, constant, target_model$Intercept, target_model$slope, target_model$b, target_model$c, target_model$d, target_model$e))
}
df_fun <- cbind(df_fun, values)
# Plot
plot <- ggplot() +
geom_boxplot(data=data, mapping=aes(x=dose, y=value, group=dose)) +
geom_line(data=df_fun, aes(x, values)) +
xlab(target_drug) +
ylab(target_feature)
return(plot)
}
plot_individual_models("CD56hiCD16negNK_STAT1_IFNa","Chlorthalidone")
plot_median_model("Bcells_CREB_IFNa","Clotrimazole")
my_path<-"/Users/jonasamar/Desktop/Drug-Assay-Study"
setwd(paste0(my_path,"/Rscripts"))
OOL_path=paste0(my_path,"/Onset of Labor data")
drug_assay_path=paste0(my_path,"/Drug assay data")
# MedianDoseresponse
load(paste0(drug_assay_path, "/Preprocessed Data/median pen dose response with scales.rda"))
# AllPenDoseresponse
load(paste0(drug_assay_path, "/Preprocessed Data/all pen dose response with scales.rda"))
# hand.log10_1.median.model
load(paste0(drug_assay_path,"/Sigmoid functions/log10_1 hand median models.rda"))
# hand.log10_1.individual.model
load(paste0(drug_assay_path,"/Sigmoid functions/log10_1 hand individual models.rda"))
# hand.log10_1.model
hand.log10_1.model <- rbind(hand.log10_1.individual.model, hand.log10_1.median.model)
# Removing the datapoints that are post partum
OOL_data <- read.csv(paste0(OOL_path, "/Preprocessed Data/immunome_noEGA_DOS_pen_OOL.csv"), row.names = 1) %>%
filter(DOS <= 0)
# Getting the samples where DOS is between -94 and -74 to get a local distribution of the values around -84 days
local_OOL_data <- OOL_data %>% filter((DOS <= -74) & (DOS >= -94))
setwd(paste0(my_path,"/Rscripts"))
OOL_path=paste0(my_path,"/Onset of Labor data")
drug_assay_path=paste0(my_path,"/Drug assay data")
out_path=paste0(drug_assay_path, "/Drug effect tensors")
plot_path=paste0(my_path, "/Plots/Drug effect tensors")
if(!file.exists(out_path)){dir.creates(out_path, recursive=TRUE)}
if(!file.exists(out_path)){dir.create(out_path, recursive=TRUE)}
if(!file.exists(plot_path)){dir.create(plot_path, recursive=TRUE)}
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(gridExtra)
library(grid)
# drug.effect.tensors
load(paste0(out_path, "/drug effect tensors.rda"))
# Keeping a copy of OOL_data
original.OOL_data <- OOL_data
# Removing DOS from OOL_data since already stored
OOL_data <- dplyr::select(OOL_data, -DOS)
# Timepoints
DOS <- original.OOL_data$DOS
apply.effect.matrix <- function(target_drug, c_k, centroid_id="median"){
# Getting the specific tensor to apply
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]][,target_drug]
# Creating a dataframe similar in shape to OOL_data with the drug effect as values instead of the actual values of the feature
effect.matrix <- data.frame(matrix(tensor,
ncol = length(rownames(OOL_data)),
nrow = nrow(tensor),
dimnames = list(rownames(drug.effect.tensor), rownames(OOL_data)))) %>%
rbind(data.frame(matrix(0,
nrow = ncol(OOL_data) - nrow(tensor),
ncol = length(rownames(OOL_data)),
dimnames = list(setdiff(colnames(OOL_data), rownames(tensor)),
rownames(OOL_data))))) %>%
t() %>%
as.data.frame() %>%
dplyr::select(all_of(colnames(OOL_data)))
# Applying the effect.matrix to the OOL_data
return(effect.matrix + OOL_data)
}
drug.tensor <- function(id, target_drug, c_k){
return(dplyr::select(drug.effect.tensors[[id]][[c_k]], target_drug)  %>%
rownames_to_column("feature") %>%
rename(effect=target_drug) %>%
dplyr::mutate(# Retrieving the separation : population, reagent, stimulation
population = sub("^(.*?)_.*", "\\1", as.character(feature)),
reagent = sub(".*?_(.*?)_.*", "\\1", as.character(feature)),
stimulation = sub(".*_.*_(.*)", "\\1", as.character(feature)),
# Coordinates for the plot of the reagents
## STAT first column
x = ifelse(grepl("STAT", reagent), 1.5, 0),
## STAT1 (1,4)
y = ifelse(reagent == "STAT1", 4, 0),
## STAT3 (1,3)
y = ifelse(reagent == "STAT3", 3, y),
## STAT5 (1,2)
y = ifelse(reagent == "STAT5", 2, y),
## STAT6 (1,1)
y = ifelse(reagent == "STAT6", 1, y),
## NFkB (3,4)
x = ifelse(reagent == "NFkB", 3, x),
y = ifelse(reagent == "NFkB", 4, y),
## ERK (3,3)
x = ifelse(reagent == "ERK", 3, x),
y = ifelse(reagent == "ERK", 3, y),
## S6 (3,2)
x = ifelse(reagent == "S6", 3, x),
y = ifelse(reagent == "S6", 2, y),
## MAPKAPK2 (3,1)
x = ifelse(reagent == "MAPKAPK2", 3, x),
y = ifelse(reagent == "MAPKAPK2", 1, y),
## IkB (4,4)
x = ifelse(reagent == "IkB", 4, x),
y = ifelse(reagent == "IkB", 4, y),
## CREB (4,3)
x = ifelse(reagent == "CREB", 4, x),
y = ifelse(reagent == "CREB", 3, y),
## p38 (4,2)
x = ifelse(reagent == "p38", 4, x),
y = ifelse(reagent == "p38", 2, y)))
}
id = "ID_1" # ID_median or ID_1 or ID_2 or ID_3 or ID_4
c_k = 4 # 1 or 2 or 3 or 4
target_drug = "Lansoprazole" # Cefotaxime or Lansoprazole or Iopamidol or Iohexol or Benzylpenicillin or Chlorthalidone or Rifabutin or Iodixanol or Metformin or Folic acid or Clotrimazole or Maprotiline or Progesterone or Pravastatin or Methylpredonisolone
test.drug.tensor <- drug.tensor(id, target_drug, c_k)
# Example of settings for the plot
example_population <- "CD4negCD8negTcells"
example_stimulation <- "unstim"
# Subset
df <- test.drug.tensor[test.drug.tensor$population == example_population &
test.drug.tensor$stimulation == example_stimulation,]
# Setting values higher or lower to +/-1 to +/-1
df[abs(df$effect) > 1,"effect"] <- sign(df[abs(df$effect) > 1,"effect"])
# Plot
p <- ggplot(df, aes(x = x, y = y)) +
# Nodes color
geom_point(aes(fill = effect), size=3, shape = 21) +
# Name of the nodes
geom_text(aes(label = reagent), vjust = -1.5, hjust = 0.5, size = 5, color = "black") +
# Scale of the color of the nodes
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, limits = c(-1., 1)) +
# Removing the ticks from x and y axis
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
# Axis
scale_x_continuous(limits = c(0.5, 5), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.5, 4.5), expand = c(0., 0.)) +
coord_fixed() +
# Lables
labs(x = NULL, y = NULL)
# Saving the plot
ggsave(paste0(plot_path, "/legend_grid_effect_plot.png"), plot = p, width = 10, height = 8)
vec1 <- c(1, 2, 3)
vec2 <- c("A", "B")
# Compute Cartesian product
cartesian_product <- expand.grid(vec1, vec2)
# Rename the columns for clarity (optional)
colnames(cartesian_product) <- c("Vector1", "Vector2")
# Display the Cartesian product
print(cartesian_product)
test
test
listr
drug.effect.tensors
# clusters
load(paste0(OOL_path, "/Patients clustering/Cluster 53 OOL patients around 4 drug assay patients.rda"))
patient_data=
OOL_data
#patient_data=
OOL_data
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]][,target_drug]
tensor
#patient_data=
length(OOL_data)
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]]#[,target_drug]
tensor
tensor
#patient_data=
OOL_data
patient_data=OOL_data["P1_26",]
patient_data
patient_data=OOL_data[sampleID,]
target_drug="Lansoprazol"
c_k=1
centroid_id="median"
sample_ID="P1_26"
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]]#[,target_drug]
patient_data=OOL_data[sampleID,]
patient_data=OOL_data[sample_ID,]
data.frame(t(tensor))
patient_data
rbind(patient_data, data.frame(t(tensor)))
data.frame(t(tensor))
patient_data
target_drug="Lansoprazol"
target_drug="Lansoprazol"
c_k=1
centroid_id="median"
sample_ID="P1_26"
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]] %>% t %>% as.data.frame()
patient_data=OOL_data[sample_ID,]
tensor <- drug.effect.tensors[[paste0("ID_", centroid_id)]][[c_k]] %>% t %>% as.data.frame()
patient_data=OOL_data[sample_ID,]
extended_tensor=cbind(tensor, data.frame(matrix(0, nrow=1, ncol=length(setdiff)))
setdiff(colnames(tensor), colnames(patient_data))
setdiff(colnames(tensor), colnames(patient_data))
setdiff(colnames(patient_data), colnames(tensor))
data.frame(matrix(0,
nrow=1,
ncol=length(setdiff(colnames(patient_data), colnames(tensor))),
dimnames=list(NULL, setdiff(colnames(patient_data), colnames(tensor))))
data.frame(matrix(0,
dimnames=list(NULL, setdiff(colnames(patient_data), colnames(tensor))))
data.frame(matrix(0,
nrow=1,
ncol=length(setdiff(colnames(patient_data), colnames(tensor))),
dimnames=list(NULL, setdiff(colnames(patient_data), colnames(tensor)))))
extended_tensor=cbind(tensor,
data.frame(matrix(0,
nrow=1,
ncol=length(setdiff(colnames(patient_data), colnames(tensor))),
dimnames=list(NULL, setdiff(colnames(patient_data), colnames(tensor))))))
extended_tensor
rbind(patient_data, tensor)
rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] = patient_and_tensor[drug,] + patient_and_tensor[sample_ID,]
}
}
patient_and_tensor=rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] = patient_and_tensor[drug,] + patient_and_tensor[sample_ID,]
}
}
patient_and_tensor
patient_and_tensor
rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] = patient_and_tensor[drug,] + patient_and_tensor[sample_ID,]
}
}
patient_and_tensor=rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] = patient_and_tensor[drug,] + patient_and_tensor[sample_ID,]
}
}
patient_and_tensor
patient_and_tensor
rbind(patient_data, extended_tensor)
patient_and_tensor[sample_ID,]
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Rows to sum (e.g., row 1 and row 3)
row1 <- 1
row2 <- 3
# Summing the two rows
sum_of_rows <- rowSums(df[c(row1, row2), ])
# Print the sum
print(sum_of_rows)
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Row 1 and Row 3
row1 <- 1
row3 <- 3
# Adding values of Row 3 to Row 1
df[row1, ] <- df[row1, ] + df[row3, ]
# Print the updated data frame
print(df)
patient_and_tensor=rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] <- patient_and_tensor[drug,] + patient_and_tensor[sample_ID,]
}
}
patient_and_tensor
rbind(patient_data, extended_tensor)
patient_and_tensor=rbind(patient_data, extended_tensor)
for (drug in rownames(patient_and_tensor)){
if (drug != sample_ID){
patient_and_tensor[drug,] <- patient_and_tensor[sample_ID,] + patient_and_tensor[drug,]
}
}
patient_and_tensor
rbind(patient_data, extended_tensor)
patient_and_tensor[-sample_ID,]
sample_ID="P1_26"
simulated_data <- patient_and_tensor[-sample_ID,]
simulated_data <- patient_and_tensor[-c(sample_ID),]
patient_and_tensor[!(rownames(patient_and_tensor) %in% c(sample_ID)),]
getwd()
getwd()
getwd()
getwd()
current_dir <- getwd()
# Move up one level in the directory tree
parent_dir <- file.path(current_dir, "..")
parent_dir
setwd(parent_dir)
current_dir <- getwd()
parent_dir <- sub("/[^/]+$", "", current_dir)
parent_dir
current_dir <- getwd()
current_dir
my_path <- sub("/[^/]+$", "", current_dir)
my_path
version
