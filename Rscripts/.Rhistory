feature <- cols[i]
# P value based on a spearman test
pval <- cor.test(Yh, CYTOF[[feature]], method = 'spearman', exact = FALSE)$p.value
# Coefficient of relative node purity given by the model
if (model.name=="Random.Forest"){
# Collecting all the node purity of the selected features
relative_node_purity <- c()
for (iter in seq(prdC)){
relative_node_purity[iter] <- prdC[[iter]][[coef_key]][feature,"IncNodePurity"]/
max(prdC[[iter]][[coef_key]][,"IncNodePurity"])
}
# Mean of the relative node purity
mean_relative_node_purity <- mean(relative_node_purity)
# Adding the feature to feature.index
feature.index <- rbind(feature.index,
data.frame(feature=feature,
pval=pval,
mean_relative_node_purity=mean_relative_node_purity,
model_index=-mean_relative_node_purity*log10(pval),
stringsAsFactors = FALSE))
}else{
# Collecting all the absolute values of the coefficients of the model
coefs <- c()
for (iter in seq(prdC)){
coefs[iter] <- abs(prdC[[iter]][[coef_key]][i])
}
# Mean of the coefficients
mean_abs_coef <- mean(coefs)
# Adding the feature to feature.index
feature.index <- rbind(feature.index,
data.frame(feature=feature,
pval=pval,
mean_abs_coef=mean_abs_coef,
model_index=-abs(mean_abs_coef)*log10(pval),
stringsAsFactors = FALSE))
}
}
feature.index <- feature.index %>% arrange(desc(model_index))
feature.index
save(feature.index, file=paste0(out_path, "/feature_index.rda"))
# Population_reagent_stim of interest
# population_reagent_stim_interest <- subset(feature.index, model_index > 0, select=feature) %>%
#                                         unlist()
# Population_reagent_unstim of interest
population_reagent_unstim_interest <- subset(feature.index, model_index > 0, select=feature) %>%
dplyr::mutate(feature=paste0(str_extract(feature, ".*(?=_[^_]*$)"),"_unstim")) %>%
distinct(feature) %>%
unlist()
# Setting the time to labor of the four patients from the drug assay study
centroids.TTL <- c(-84,-84,-84,-84)
# Getting the centroids (4 patients)
drug_assay_unstim_0 <- subset(read.csv(paste(drug_assay_path, "/Preprocessed Data/preprocessed_pen.csv", sep = "/")),
dose==-1,
select= -c(X, dose)) %>%
dplyr::mutate(feature.name=paste(population, reagent, stimulation, sep="_")) %>%
dplyr::filter(feature.name %in% population_reagent_unstim_interest)
# drug_assay_stim_0 <- subset(read.csv(paste(drug_assay_path, "/Preprocessed Data/preprocessed_pen.csv", sep = "/")),
#                                              (dose %in% c(-1,0) & !(stimulation=="unstim" & dose==0) ), #
#                                              select= -c(X,dose)) %>%
#                                      dplyr::mutate(feature.name=paste(population, reagent, stimulation, sep="_")) %>%
#                                      dplyr::filter(feature.name %in% population_reagent_stim_interest)
centroids <- drug_assay_unstim_0 %>%
group_by(feature.name, ID) %>%
dplyr::summarise(feature=median(feature)) %>%
pivot_wider(names_from = ID, values_from = feature) %>%
column_to_rownames("feature.name")
# Joining the TTL prediction and the Id of the patients to the CYTOF data
OOL_data <- read_csv(paste0(OOL_path, "/Preprocessed Data/immunome_EGA_pen_OOL.csv"), show_col_types = FALSE)
OOL_unstim <- OOL_data[, (grepl("unstim", colnames(OOL_data)) & (colnames(OOL_data) %in% rownames(centroids)))] %>%
cbind(data.frame("TTL"=list_preds[[model.name]], "ID"=Id))
# OOL_stim <- OOL_data[, colnames(OOL_data) %in% rownames(centroids)] %>%
#                 cbind(data.frame("TTL"=list_preds[[model.name]], "ID"=Id))
# Normalization of the data
for (target_feature in rownames(centroids)){
# Mean and std from drug assay data
mu_DA <- subset(drug_assay_unstim_0, feature.name==target_feature, select=feature) %>% unlist() %>% mean(na.rm=T)
sd_DA <- subset(drug_assay_unstim_0, feature.name==target_feature, select=feature) %>% unlist() %>% sd(na.rm=T)
# Mean and std from OOL data
mu_OOL <- subset(OOL_data, select=target_feature) %>% unlist() %>% mean(na.rm=T)
sd_OOL <- subset(OOL_data, select=target_feature) %>% unlist() %>% sd(na.rm=T)
# Rescaling the features
centroids[target_feature,] <- (centroids[target_feature,] - mu_DA)/sd_DA
OOL_unstim[,target_feature] <- (OOL_unstim[,target_feature] - mu_OOL)/sd_OOL
}
# Adding the TTL predictions to the centroids
centroids["TTL",] <- centroids.TTL
# Clusters initialization
clusters <- list(c(), c(), c(), c())
data_points <- c()
# Filling the cluster patient per patient
for (id in unique(Id)){
# Getting all the samples from the same patient
samples <- subset(OOL_unstim, ID==id, select=-ID) %>% remove_rownames() %>% t()
colnames(samples) <- seq(colnames(samples))
# Calculating the euclidian distances between the patient and the centroids
list_dist <- list()
for (centroid_id in seq(centroids.TTL)){
centroid_data <- centroids %>% dplyr::select(centroid_id) %>% setNames("centroid")
dist_euclid <- cbind(centroid_data, samples) %>%
# Calculating (sample - centroid)^2
dplyr::mutate(across(where(is.numeric), ~ (. - centroid)^2)) %>%
# Selecting sample with closest TTL to the centroid TTL
dplyr::select(-centroid) %>%
t() %>%
as.data.frame() %>%
dplyr::filter(TTL==min(TTL)) %>%
# Calculating euclidian distance with centroid
dplyr::select(-TTL)%>%
unlist() %>%
sum(na.rm=T) %>%
sqrt()
list_dist[[centroid_id]] <- dist_euclid
}
# Assigning the id to one of the four clusters
closest_centroid <- which.min(unlist(list_dist))
clusters[[closest_centroid]] <- c(clusters[[closest_centroid]], id)
# Getting the sample used for the clustering
sample <- samples %>% t() %>% as.data.frame() %>%
dplyr::mutate(dist.TTL=abs(TTL-centroids.TTL[closest_centroid]),
cluster=closest_centroid) %>%
subset(dist.TTL==min(dist.TTL), select=-c(TTL, dist.TTL))
data_points <- rbind(data_points, sample)
}
# Creating new directory
if (!file.exists(paste0(OOL_path, "/Patients clustering"))){dir.create(paste0(OOL_path, "/Patients clustering"), recursive = TRUE)}
# Saving the clusters
save(clusters, file=paste0(OOL_path, "/Patients clustering/Cluster 53 OOL patients around 4 drug assay patients.rda"))
# Adding the centroids to the data_points used for the clustering
colnames(centroids) = c("centroid1","centroid2","centroid3","centroid4")
data_points <- rbind(data_points,
centroids[!(rownames(centroids) %in% c("TTL")),] %>% t() %>% cbind(matrix(c(1, 2, 3, 4), ncol=1, nrow=4, dimnames=list(NULL, "cluster"))))
# Filter out variables with variance not equal to zero
filtered_data <- data_points %>% select_if(~sd(., na.rm = TRUE) != 0)
# Separating cluster number from actual coordinates
patient_clusters  <- data_points$cluster %>% as.character()
data <- dplyr::select(filtered_data, -cluster)
# Imputing missing values and determining the optimal number of principal components to represent our data
nb <- estim_ncpPCA(data,method.cv = "Kfold", verbose = FALSE)
res.comp <- imputePCA(data, ncp = nb$ncp)
# Using PCA to project the points on a 2D surface
imp <- cbind.data.frame(res.comp$completeObs,patient_clusters)
res.pca <- PCA(imp, quanti.sup = 1, quali.sup = dim(imp)[2], ncp = nb$ncp, graph=FALSE)
# Dataframes for plot
projected_coord <- cbind(res.pca$ind$coord[,c("Dim.1", "Dim.2")], patient_clusters)
df_coord <- as.data.frame(projected_coord) %>%
rownames_to_column("ID") %>%
dplyr::filter(!grepl("centroid", ID)) %>%
dplyr::mutate(Dim.1=as.double(Dim.1), Dim.2=as.double(Dim.2))
df_centroid <- as.data.frame(projected_coord) %>%
rownames_to_column("ID") %>%
dplyr::filter(grepl("centroid", ID))%>%
dplyr::mutate(Dim.1=as.double(Dim.1), Dim.2=as.double(Dim.2))
# Plot with all the points
p1 <- ggplot() +
geom_point(data=df_centroid, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="Drug assay centroids"), size=3) +
geom_point(data=df_coord, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="OOL patients")) +
scale_shape_manual(name = "Patients", values = c("OOL patients" = 21, "Drug assay centroids" = 8)) +
guides(shape = guide_legend(title = "Patients", order=2), color=guide_legend(title = "Clusters", order=1)) +
scale_x_continuous(limits=c(-5, 5), expand=c(0., 0.)) +
scale_y_continuous(limits=c(-3, 3), expand=c(0., 0.)) +
ggtitle("Projection of patient clustering on 2 first dimensions of PCA analysis") +
theme_minimal()
# Plot with only the centroids
p2 <- ggplot() +
geom_point(data=df_centroid, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="Drug assay centroids"), size=3) +
scale_shape_manual(name = "Patients", values = c("OOL patients" = 21, "Drug assay centroids" = 8)) +
guides(shape = guide_legend(title = "Patients", order=2), color=guide_legend(title = "Clusters", order=1)) +
scale_x_continuous(limits=c(-5, 5), expand=c(0., 0.)) +
scale_y_continuous(limits=c(-3, 3), expand=c(0., 0.)) +
ggtitle("Projection of centroids on 2 first dimensions of PCA analysis") +
theme_minimal()
# Creating new directory
if (!file.exists(paste0(my_path, "/Plots/Clustering"))){dir.create(paste0(my_path, "/Plots/Clustering"), recursive = TRUE)}
# Saving the clustering plots
pdf(paste0(my_path, "/Plots/Clustering/Projection of patient clustering with PCA dim1&2.pdf"), height=5, width=7)
p1
p2
dev.off()
# Dataframes for plot
projected_coord <- cbind(res.pca$ind$coord[,c("Dim.1", "Dim.2")], patient_clusters)
df_coord <- as.data.frame(projected_coord) %>%
rownames_to_column("ID") %>%
dplyr::filter(!grepl("centroid", ID)) %>%
dplyr::mutate(Dim.1=as.double(Dim.1), Dim.2=as.double(Dim.2))
df_centroid <- as.data.frame(projected_coord) %>%
rownames_to_column("ID") %>%
dplyr::filter(grepl("centroid", ID))%>%
dplyr::mutate(Dim.1=as.double(Dim.1), Dim.2=as.double(Dim.2))
# Plot with all the points
p1 <- ggplot() +
geom_point(data=df_centroid, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="Drug assay centroids"), size=3) +
geom_point(data=df_coord, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="OOL patients")) +
scale_shape_manual(name = "Patients", values = c("OOL patients" = 21, "Drug assay centroids" = 8)) +
guides(shape = guide_legend(title = "Patients", order=2), color=guide_legend(title = "Clusters", order=1)) +
#scale_x_continuous(limits=c(-5, 5), expand=c(0., 0.)) +
#scale_y_continuous(limits=c(-3, 3), expand=c(0., 0.)) +
ggtitle("Projection of patient clustering on 2 first dimensions of PCA analysis") +
theme_minimal()
# Plot with only the centroids
p2 <- ggplot() +
geom_point(data=df_centroid, aes(x=Dim.1, y=Dim.2, color=patient_clusters, shape="Drug assay centroids"), size=3) +
scale_shape_manual(name = "Patients", values = c("OOL patients" = 21, "Drug assay centroids" = 8)) +
guides(shape = guide_legend(title = "Patients", order=2), color=guide_legend(title = "Clusters", order=1)) +
#scale_x_continuous(limits=c(-5, 5), expand=c(0., 0.)) +
#scale_y_continuous(limits=c(-3, 3), expand=c(0., 0.)) +
ggtitle("Projection of centroids on 2 first dimensions of PCA analysis") +
theme_minimal()
# Creating new directory
if (!file.exists(paste0(my_path, "/Plots/Clustering"))){dir.create(paste0(my_path, "/Plots/Clustering"), recursive = TRUE)}
# Saving the clustering plots
pdf(paste0(my_path, "/Plots/Clustering/Projection of patient clustering with PCA dim1&2.pdf"), height=5, width=7)
p1
p2
dev.off()
current_dir <- getwd()
my_path <- sub("/[^/]+$", "", current_dir)
setwd(paste0(my_path,"/Rscripts"))
funct_path=paste0(my_path,"/Drug assay data/Drug Assay Project Initial Data/Drug assay ID1-4re-normalized&barcorded - Statistics - ID2P3 removed.csv")
path_to_penalization_file = paste0(my_path, "/Drug assay data/Drug Assay Project Initial Data/penalization matrix drug assay.xlsx")
out_path=paste0(my_path,"/Drug assay data/Preprocessed Data")
if (!file.exists(out_path)){dir.create(out_path)}
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
MyData = read.csv(funct_path)
head(MyData)
MyData = subset(MyData, select = -c(filename, uniquePopulationName, parentPopulation, channel))
#This vector contains the name of the drugs in the order corresponding to the plate number they were tested
Drugs <- c(
"Cefotaxime",
"Lansoprazole",
"Iopamidol",
"Iohexol",
"Benzylpenicillin",
"Chlorthalidone",
"Rifabutin",
"Iodixanol",
"Metformin",
"Folic acid",
"Clotrimazole",
"Maprotiline",
"Progesterone",
"Pravastatin",
"Methylpredonisolone"
)
# We associate the name of the drug corresponding to its plate number in MyData
for (i in seq(1, 15)){
MyData = MyData %>%
dplyr::mutate(Drug =  ifelse(Plate == i, Drugs[i], Drug))
}
# Removing the Plate column
MyData = subset(MyData, select = -c(Plate))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("1ug", "1ng"), "1" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("10ug","10ng"), "10" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("100ug", "100ng"), "100" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("1000ug", "1000ng"), "1000" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("0.50%", "0.5%"), "0", Dose))
MyData = MyData %>%
dplyr::rename("dose" = "Dose",
"drug" = "Drug",
"stimulation" = "Stims") %>%
dplyr::mutate(stimulation = gsub("GM-CSF", "GMCSF", stimulation),
stimulation = gsub("Unstim", "unstim", stimulation))
head(MyData)
final_data = c()
metadata = setdiff(colnames(MyData), c("dose", "stimulation", "median"))
for(drug.name in unique(MyData$drug)){
# Filtering the data with a specific drug
MyData_drug = MyData %>% dplyr::filter(drug == drug.name) %>%
dplyr::mutate(conditions=paste0(stimulation, "_", dose, sep=""))
# Getting the stims for this drug
conditions = unique(MyData_drug$conditions)
# asinh transformation
MyData_drug = MyData_drug %>% dplyr::mutate(feature = asinh(median/5))
# Removing the median column and calculating Stimulated - Unstimulated_0
MyData_drug = MyData_drug[, names(MyData_drug) != "median"] %>%
dplyr::select(-c(stimulation, dose)) %>%
pivot_wider(names_from = conditions, values_from = feature)
MyData_drug["unstim_-1"] = MyData_drug["unstim_0"] # Saving the asinh transform of unstim_0
for (condition in conditions){
MyData_drug[condition] = MyData_drug[condition] - MyData_drug["unstim_0"]
}
MyData_fin = MyData_drug %>%
pivot_longer(-all_of(metadata), names_to="conditions",values_to="feature") %>%
dplyr::mutate(dose=as.double(sub(".*_(.*)", "\\1", conditions)),
stimulation=sub("_.*", "", conditions)) %>%
dplyr::select(-conditions)
# Adding the new calculated features to the final dataset
final_data = rbind(final_data, MyData_fin)
}
current_dir <- getwd()
my_path <- sub("/[^/]+$", "", current_dir)
setwd(paste0(my_path,"/Rscripts"))
funct_path=paste0(my_path,"/Drug assay data/Drug Assay Project Initial Data/Drug assay ID1-4re-normalized&barcorded - Statistics - ID2P3 removed.csv")
path_to_penalization_file = paste0(my_path, "/Drug assay data/Drug Assay Project Initial Data/penalization matrix drug assay.xlsx")
out_path=paste0(my_path,"/Drug assay data/Preprocessed Data")
if (!file.exists(out_path)){dir.create(out_path)}
library(dplyr)
library(tidyr)
library(stringr)
library(readxl)
MyData = read.csv(funct_path)
head(MyData)
MyData = subset(MyData, select = -c(filename, uniquePopulationName, parentPopulation, channel))
#This vector contains the name of the drugs in the order corresponding to the plate number they were tested
Drugs <- c(
"Cefotaxime",
"Lansoprazole",
"Iopamidol",
"Iohexol",
"Benzylpenicillin",
"Chlorthalidone",
"Rifabutin",
"Iodixanol",
"Metformin",
"Folic acid",
"Clotrimazole",
"Maprotiline",
"Progesterone",
"Pravastatin",
"Methylpredonisolone"
)
# We associate the name of the drug corresponding to its plate number in MyData
for (i in seq(1, 15)){
MyData = MyData %>%
dplyr::mutate(Drug =  ifelse(Plate == i, Drugs[i], Drug))
}
# Removing the Plate column
MyData = subset(MyData, select = -c(Plate))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("1ug", "1ng"), "1" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("10ug","10ng"), "10" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("100ug", "100ng"), "100" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("1000ug", "1000ng"), "1000" , Dose))
MyData = MyData %>%
dplyr::mutate(Dose =  ifelse(Dose %in% c("0.50%", "0.5%"), "0", Dose))
MyData = MyData %>%
dplyr::rename("dose" = "Dose",
"drug" = "Drug",
"stimulation" = "Stims") %>%
dplyr::mutate(stimulation = gsub("GM-CSF", "GMCSF", stimulation),
stimulation = gsub("Unstim", "unstim", stimulation))
head(MyData)
final_data = c()
metadata = setdiff(colnames(MyData), c("dose", "stimulation", "median"))
for(drug.name in unique(MyData$drug)){
# Filtering the data with a specific drug
MyData_drug = MyData %>% dplyr::filter(drug == drug.name) %>%
dplyr::mutate(conditions=paste0(stimulation, "_", dose, sep=""))
# Getting the stims for this drug
conditions = unique(MyData_drug$conditions)
# asinh transformation
MyData_drug = MyData_drug %>% dplyr::mutate(feature = asinh(median/5))
# Removing the median column and calculating Stimulated - Unstimulated_0
MyData_drug = MyData_drug[, names(MyData_drug) != "median"] %>%
dplyr::select(-c(stimulation, dose)) %>%
pivot_wider(names_from = conditions, values_from = feature)
MyData_drug["unstim_-1"] = MyData_drug["unstim_0"] # Saving the asinh transform of unstim_0
for (condition in conditions){
MyData_drug[condition] = MyData_drug[condition] - MyData_drug["unstim_0"]
}
MyData_fin = MyData_drug %>%
pivot_longer(-all_of(metadata), names_to="conditions",values_to="feature") %>%
dplyr::mutate(dose=as.double(sub(".*_(.*)", "\\1", conditions)),
stimulation=sub("_.*", "", conditions)) %>%
dplyr::select(-conditions)
# Adding the new calculated features to the final dataset
final_data = rbind(final_data, MyData_fin)
}
write.csv(final_data, paste(out_path, "preprocessed.csv", sep = "/"))
penalization_preprocessing <- function(penalization_matrix, stim.name){
penalization_matrix <- penalization_matrix %>%
`colnames<-`(c("population", colnames(penalization_matrix)[-1])) %>%
dplyr::mutate(population = as.factor(population)) %>%
gather("protein", "penalization", -population) %>%
dplyr::mutate(feature = paste(population, "_", protein, "_", stim.name, sep="")) %>%
dplyr::filter(penalization == 0) %>%
dplyr::mutate(feature = sub("_[^_]*_", "_", feature))
}
stims = c("IFNa","LPS","IL246","GMCSF")
discard = c()
for (stim in stims){
new_penalization = penalization_preprocessing(read_xlsx(path_to_penalization_file, sheet = stim)[1:12], stim)
discard <- c(discard, new_penalization$feature)
}
pen_final_data <- final_data %>%
dplyr::mutate(feature.name = paste(population, "_", reagent, "_", stimulation, sep="")) %>%
dplyr::filter(!feature.name %in% discard) %>%
dplyr::select(-feature.name)
write.csv(pen_final_data, paste(out_path, "preprocessed_pen.csv", sep = "/"))
current_dir <- getwd()
my_path <- sub("/[^/]+$", "", current_dir)
setwd(paste0(my_path,"/Rscripts"))
OOL_path=paste0(my_path,"/Onset of Labor data")
drug_assay_path=paste0(my_path,"/Drug assay data")
out_path=paste0(drug_assay_path,"/Preprocessed Data")
plot_path=paste0(my_path,"/Plots/Drug Assay data visualization")
if(!file.exists(out_path)){dir.create(out_path, recursive = TRUE)}
if(!file.exists(plot_path)){dir.create(plot_path, recursive = TRUE)}
library(tidyverse)
library(tidyselect)
library(reshape2)
library(dplyr)
library(viridis)
library(tidyr)
library(janitor)
library(utils)
library(ggplot2)
library(gridExtra)
library(grid)
pen_final_data <- read.csv(paste0(drug_assay_path, "/Preprocessed Data/preprocessed_pen.csv")) %>%
# Removing the asinh transform of unstim_0
dplyr::filter(dose >= 0)
AllPenDoseresponse <- pen_final_data %>%
# Adding a D in front of the dose value
dplyr::mutate(dose = paste0("D", dose)) %>%
dcast(ID + population + reagent + drug + stimulation ~ dose, value.var = "feature") %>%
# feature = population_reagent_stimulation
dplyr::mutate(feature=paste0(population, "_", reagent, "_", stimulation)) %>%
pivot_longer(cols = c("D0", "D1", "D10", "D100", "D1000")) %>%
rename("dose" = "name") %>%
dplyr::select(c("ID", "feature", "drug", "dose", "value")) %>%
na.omit()
head(AllPenDoseresponse)
save(AllPenDoseresponse, file=paste0(out_path, "/all pen dose response.rda"))
# Function that create a grid with the plots of boxplots of the features for every drug for a specific target dose
# The point of this plot is to see if the values of the features are significantly similar enough to justify the construction of a model
top_n_var_features_boxplot_grid <-function(target_dose, n){
# Subset the data for dose=="D0"
subset_data <- AllPenDoseresponse %>% dplyr::filter(dose == target_dose)
# Create an empty list to store the boxplot plots
boxplot_plots <- list()
# Iterate over each drug
for (target_drug in unique(subset_data$drug)) {
# Subset the data for the current drug
drug_data <- subset_data %>% dplyr::filter(drug == target_drug)
# Compute the variance for each feature
variances <- drug_data %>%
group_by(feature) %>%
summarize(variance = var(value)) %>%
arrange(desc(variance))
# Select the top n features with the biggest variances
top_features <- head(variances$feature, n)
# Subset the data for the top features
top_data <- drug_data %>%
dplyr::filter(feature %in% top_features) %>%
dplyr::mutate(ID = as.factor(ID))
ordered_features <- top_data %>%
group_by(feature) %>%
summarize(median_value = median(value, na.rm = TRUE)) %>%
arrange(desc(median_value)) %>%
pull(feature)
# Convert feature to factor with the desired order
top_data$feature <- factor(top_data$feature, levels = ordered_features)
# Create a boxplot plot for the current drug
p <- ggplot(top_data, mapping = aes(x = feature, y = value)) +
geom_boxplot() +
geom_point(na.rm = T, alpha = 0.5, aes(color = ID)) +
labs(title = target_drug) +
theme(plot.title = element_text(size = 12, margin = margin(r = 5)),
axis.text.x = element_text(size = 4, angle = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# Store the boxplot plot in the list
boxplot_plots[[target_drug]] <- p
}
# Save the grid of boxplots as a PDF file
pdf(paste(plot_path, "/", target_dose, "_top", n, "variances_feature_boxplot_grid.pdf", sep=""),
width = 15, height = 8)
for (i in 0:4){
grid.draw(grid.arrange(grobs=boxplot_plots[(3*i+1):(3*i+3)], nrow=3, ncol = 1))
}
dev.off()
}
# Function creating one plot
plot_feature_drug_boxplot <- function(target_feature, target_drug){
subset <- AllPenDoseresponse %>%
dplyr::filter(feature == target_feature,
drug == target_drug) %>%
dplyr::mutate(ID = as.factor(ID))
p <- ggplot(subset, mapping = aes(x = dose, y = value)) +
geom_boxplot() +
geom_point(na.rm = T, alpha = 0.5, aes(color = ID)) +
geom_line(aes(group = ID, color = ID), linewidth=1.5) +
xlab(target_drug) +
ylab(target_feature)
return(p)
}
AllPenDoseresponse <- AllPenDoseresponse %>%
dplyr::mutate(dose = as.numeric(sub("^D", "", dose)),
# Log10 transform (0 are set to NA)
log10_dose = log10(dose),
# Log10(x + 1) transform
log10_1_dose = log10(dose +1),
# Pseudo log transform
pseudo_log_dose = asinh(dose/2)/log(10))
MedianDoseresponse <- AllPenDoseresponse %>%
group_by(dose, drug, feature) %>%
dplyr::mutate(median_value = median(value, na.rm = TRUE)) %>%
dplyr::select(-c(ID, value)) %>%
distinct()
save(AllPenDoseresponse, file=paste0(out_path, "/all pen dose response with scales.rda"))
save(MedianDoseresponse, file=paste0(out_path, "/median pen dose response with scales.rda"))
