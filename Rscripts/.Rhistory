MyData_timepoint = MyData_timepoint %>%
dplyr::mutate(feature = asinh(value/5)) %>%
dplyr::select(-c("group", "value")) %>%
pivot_wider(names_from = stimulation, values_from = feature)
print(sum(is.na(MyData_timepoint$Unstim)))
print(dim(MyData_timepoint))
if (sum(is.na(MyData_timepoint$Unstim)) > 0){
print(MyData_timepoint[is.na(MyData_timepoint$Unstim),])
}
# Difference between stim and un-stim
for (stim in stims){
if (stim!="Unstim"){
MyData_timepoint[stim] = MyData_timepoint[stim] - MyData_timepoint["Unstim"]
}
}
MyData_fin = MyData_timepoint %>%
pivot_longer(-all_of(fil), names_to="stimulation",values_to="feature")
# Adding the new preprocessed data to final_data
final_data = rbind(final_data, MyData_fin)
}
# BA005 BL pDC Unstim
all_data[(all_data$sampleID=="BA005")&(all_data$time=="BL")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
# BA005 BL pDC Unstim
all_data[(all_data$sampleID=="BA005")&(all_data$time=="BL")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
all_data[(all_data$sampleID=="BA005")&(all_data$time=="BL")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
all_data[(all_data$sampleID=="GYN001")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
# GYN001 POD1 pDC Unstim
all_data[(all_data$sampleID=="GYN001")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
all_data[(all_data$sampleID=="PLA007")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
# PLA007 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA007")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
# PLA008 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
all_data[(all_data$sampleID=="PLA0012")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]
# PLA0012 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA0012")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="Baso")&(all_data$stimulation=="Unstim"),]
# PLA008 POD1 Baso Unstim
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="Baso")&(all_data$stimulation=="Unstim"),]$value = 0
final_data = c()
fil = c("population","reagent","sampleID", "time")
for(timepoint in unique(all_data$time)){
# subset of the data for a given time
MyData_timepoint = all_data %>% dplyr::filter(time == timepoint)
# stimulations associated to this time
stims = unique(MyData_timepoint$stimulation)
# asinh transform and removing outcomes (group)
MyData_timepoint = MyData_timepoint %>%
dplyr::mutate(feature = asinh(value/5)) %>%
dplyr::select(-c("group", "value")) %>%
pivot_wider(names_from = stimulation, values_from = feature)
print(sum(is.na(MyData_timepoint$Unstim)))
print(dim(MyData_timepoint))
if (sum(is.na(MyData_timepoint$Unstim)) > 0){
print(MyData_timepoint[is.na(MyData_timepoint$Unstim),])
}
# Difference between stim and un-stim
for (stim in stims){
if (stim!="Unstim"){
MyData_timepoint[stim] = MyData_timepoint[stim] - MyData_timepoint["Unstim"]
}
}
MyData_fin = MyData_timepoint %>%
pivot_longer(-all_of(fil), names_to="stimulation",values_to="feature")
# Adding the new preprocessed data to final_data
final_data = rbind(final_data, MyData_fin)
}
final_data = c()
fil = c("population","reagent","sampleID", "time")
for(timepoint in unique(all_data$time)){
# subset of the data for a given time
MyData_timepoint = all_data %>% dplyr::filter(time == timepoint)
# stimulations associated to this time
stims = unique(MyData_timepoint$stimulation)
# asinh transform and removing outcomes (group)
MyData_timepoint = MyData_timepoint %>%
dplyr::mutate(feature = asinh(value/5)) %>%
dplyr::select(-c("group", "value")) %>%
pivot_wider(names_from = stimulation, values_from = feature)
# Difference between stim and un-stim
for (stim in stims){
if (stim!="Unstim"){
MyData_timepoint[stim] = MyData_timepoint[stim] - MyData_timepoint["Unstim"]
}
}
MyData_fin = MyData_timepoint %>%
pivot_longer(-all_of(fil), names_to="stimulation",values_to="feature")
# Adding the new preprocessed data to final_data
final_data = rbind(final_data, MyData_fin)
}
write.csv(final_data, paste0(out_path, "/preprocessed.csv"), row.names=FALSE)
final_data <- final_data %>%
dplyr::mutate(feature.name=paste0(population, "_", reagent, "_", stimulation))
penalization_preprocessing <- function(penalization_matrix, stim.name){
penalization_matrix <- penalization_matrix %>%
`colnames<-`(c("population", colnames(penalization_matrix)[-1])) %>%
dplyr::mutate(population = as.factor(population)) %>%
gather("protein", "penalization", -population) %>%
dplyr::mutate(feature = paste(population, "_", protein, "_", stim.name, sep="")) %>%
dplyr::filter(penalization == 0) %>%
dplyr::mutate(feature = sub("_[^_]*_", "_", feature))
}
stims = c("TNFa","LPS","IL")
discard = c()
for (stim in stims){
new_penalization = penalization_preprocessing(read_xlsx(paste0(data_path, "/PenalizationMatrix_surge_prehab.xlsx"), sheet = stim), stim)
discard <- c(discard, new_penalization$feature)
}
pen_data <- final_data %>% dplyr::filter(!(feature.name %in% discard)) %>% dplyr::select(-feature.name)
write.csv(pen_data, paste0(out_path, "/pen_preprocessed.csv"), row.names=FALSE)
freq_data <- read.csv(paste0(data_path, "/Surge_frequency.csv"))
fun_data <- read.csv(paste0(data_path, "/Surge_functional.csv"))
populations.of.interest <- read_xlsx(paste0(data_path, "/PenalizationMatrix_surge_prehab.xlsx"), sheet = "Unstim")$population
# Concatenating the tables adding frequency as a new reagent
all_data <- rbind(rename(fun_data, "value"="median"),
freq_data %>% dplyr::mutate(reagent="frequency") %>% rename("value"="frequency")) %>%
dplyr::mutate(reagent = sub(".*_", "", reagent)) %>%
dplyr::filter(population %in% populations.of.interest) %>%
dplyr::select(-X)
# BA005 BL pDC Unstim
all_data[(all_data$sampleID=="BA005")&(all_data$time=="BL")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
# GYN001 POD1 pDC Unstim
all_data[(all_data$sampleID=="GYN001")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
# PLA007 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA007")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
# PLA008 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
# PLA0012 POD1 pDC Unstim
all_data[(all_data$sampleID=="PLA0012")&(all_data$time=="POD1")&(all_data$population=="pDC")&(all_data$stimulation=="Unstim"),]$value = 0
# PLA008 POD1 Baso Unstim
all_data[(all_data$sampleID=="PLA008")&(all_data$time=="POD1")&(all_data$population=="Baso")&(all_data$stimulation=="Unstim"),]$value = 0
final_data = c()
fil = c("population","reagent","sampleID", "time", "group")
for(timepoint in unique(all_data$time)){
# subset of the data for a given time
MyData_timepoint = all_data %>% dplyr::filter(time == timepoint)
# stimulations associated to this time
stims = unique(MyData_timepoint$stimulation)
# asinh transform
MyData_timepoint = MyData_timepoint %>%
dplyr::mutate(feature = asinh(value/5)) %>%
dplyr::select(-c("value")) %>%
pivot_wider(names_from = stimulation, values_from = feature)
# Difference between stim and un-stim
for (stim in stims){
if (stim!="Unstim"){
MyData_timepoint[stim] = MyData_timepoint[stim] - MyData_timepoint["Unstim"]
}
}
MyData_fin = MyData_timepoint %>%
pivot_longer(-all_of(fil), names_to="stimulation",values_to="feature")
# Adding the new preprocessed data to final_data
final_data = rbind(final_data, MyData_fin)
}
write.csv(final_data, paste0(out_path, "/preprocessed.csv"), row.names=FALSE)
final_data <- final_data %>%
dplyr::mutate(feature.name=paste0(population, "_", reagent, "_", stimulation))
penalization_preprocessing <- function(penalization_matrix, stim.name){
penalization_matrix <- penalization_matrix %>%
`colnames<-`(c("population", colnames(penalization_matrix)[-1])) %>%
dplyr::mutate(population = as.factor(population)) %>%
gather("protein", "penalization", -population) %>%
dplyr::mutate(feature = paste(population, "_", protein, "_", stim.name, sep="")) %>%
dplyr::filter(penalization == 0) %>%
dplyr::mutate(feature = sub("_[^_]*_", "_", feature))
}
stims = c("TNFa","LPS","IL")
discard = c()
for (stim in stims){
new_penalization = penalization_preprocessing(read_xlsx(paste0(data_path, "/PenalizationMatrix_surge_prehab.xlsx"), sheet = stim), stim)
discard <- c(discard, new_penalization$feature)
}
pen_data <- final_data %>% dplyr::filter(!(feature.name %in% discard)) %>% dplyr::select(-feature.name)
write.csv(pen_data, paste0(out_path, "/pen_preprocessed.csv"), row.names=FALSE)
pen_data
pen_data <- final_data %>% dplyr::filter(!(feature.name %in% discard)) %>% dplyr::select(-feature.name)
pen_data
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"))
ratio_IDX_BL
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature)
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature)
ratio_IDX_BL
pen_data <- pen_data %>%
dplyr::mutate(feature.name = paste0(population, "_", reagent, "_", stimulation)) %>%
dplyr::select(-c(population, reagent, stimulation))
pen_data
pen_data <- pen_data %>%
dplyr::mutate(feature.name = paste0(population, "_", reagent, "_", stimulation)) %>%
dplyr::select(-c(population, reagent, stimulation))
pen_data <- final_data %>% dplyr::filter(!(feature.name %in% discard)) %>% dplyr::select(-feature.name)
pen_data <- pen_data %>%
dplyr::mutate(feature.name = paste0(population, "_", reagent, "_", stimulation)) %>%
dplyr::select(-c(population, reagent, stimulation))
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL))
ratio_IDX_BL
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature)
ratio_IDX_BL
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Removing GYN003 and CR0367 because they are missing IDX
dplyr::filter(!(sampleID %in% c("GYN003","CR0367")))
ratio_IDX_BL
sum(is.na(ratio_IDX_BL))
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) #%>%
sum(is.na(ratio_IDX_BL))
9613 - 7147
2466/2
dim(ratio_IDX_BL)
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Removing GYN003 and CR0367 because they are missing IDX
dplyr::filter(!(sampleID %in% c("GYN003","CR0367")))
colSums(is.na(ratio_IDX_BL))
colSums(is.na(ratio_IDX_BL))
missing_counts <- colSums(is.na(ratio_IDX_BL))
names(missing_counts[missing_counts > 10])
names(missing_counts[missing_counts > 40])
names(missing_counts[missing_counts > 50])
dim(ratio_IDX_BL)
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Removing GYN003 and CR0367 because they are missing IDX
dplyr::filter(!(sampleID %in% c("GYN003","CR0367"))) %>%
# Filtering out columns with only missing values
select_if(~ !all(is.na(.)))
dim(ratio_IDX_BL)
sum(is.na(ratio_IDX_BL))
dplyr::select(ratio_IDX_BL, -group)
# Saving the feature table
write.csv(dplyr::select(ratio_IDX_BL, -group), paste0(out_path, "/ratio_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(ratio_IDX_BL, c(sampleID, group)), paste0(out_path, "/ratio_IDX_BL_outcomes.csv"), row.names=FALSE)
out_path
ratio_IDX_BL <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# group 1,2 -> 0,1
dplyr::mutate(group=group-1) %>%
# Ratio IDX - BL
pivot_wider(names_from = time, values_from = feature) %>%
dplyr::mutate(feature = IDX - BL) %>%
# Removing IDX and BL columns
dplyr::select(-c(IDX, BL)) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Removing GYN003 and CR0367 because they are missing IDX
dplyr::filter(!(sampleID %in% c("GYN003","CR0367"))) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(ratio_IDX_BL, -group), paste0(out_path, "/ratio_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(ratio_IDX_BL, c(sampleID, group)), paste0(out_path, "/ratio_IDX_BL_outcomes.csv"), row.names=FALSE)
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0)
pen_data %>%
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0))
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0)) %>%
# Removing time columns
dplyr::select(-time)
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature)
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time)
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature)
dim(identify_IDX_prehab)
identify_IDX_prehab <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature)
dim(identify_IDX_prehab)
identify_IDX_prehab <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
dim(identify_IDX_prehab)
identify_IDX_prehab
identify_IDX_prehab <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse((group==2)&(time=="IDX"), 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(identify_IDX_prehab, -group), paste0(out_path, "/identify_IDX_prehab_among_all_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(identify_IDX_prehab, c(sampleID, group)), paste0(out_path, "/identify_IDX_prehab_among_all_IDX_BL_outcomes.csv"), row.names=FALSE)
pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"),
# Keeping only prehab samples
group==2)
identify_IDX_among_prehab <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"),
# Keeping only prehab samples
group==2) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(identify_IDX_prehab, -group), paste0(out_path, "/identify_IDX_prehab_among_all_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(identify_IDX_prehab, c(sampleID, group)), paste0(out_path, "/identify_IDX_prehab_among_all_IDX_BL_outcomes.csv"), row.names=FALSE)
identify_IDX_among_prehab
identify_IDX_among_prehab <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"),
# Keeping only prehab samples
group==2) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_prehab, -group), paste0(out_path, "/identify_IDX_among_prehab_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_prehab, c(sampleID, group)), paste0(out_path, "/identify_IDX_among_prehab_IDX_BL_outcomes.csv"), row.names=FALSE)
identify_IDX_among_control <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"),
# Keeping only control samples
group==1) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
identify_IDX_among_control
identify_IDX_among_control <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1"),
# Keeping only control samples
group==1) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_control, -group), paste0(out_path, "/identify_IDX_among_control_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_control, c(sampleID, group)), paste0(out_path, "/identify_IDX_among_control_IDX_BL_outcomes.csv"), row.names=FALSE)
identify_IDX_among_all <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
identify_IDX_among_all
identify_IDX_among_all <- pen_data %>%
# Removing POD1
dplyr::filter(!(time=="POD1")) %>%
# Changing the groups to match with the outcomes we want to predict
dplyr::mutate(group=ifelse(time=="IDX", 1, 0),
# Adding time to the sampleID to tell apart two samples from same sampleID
sampleID=paste0(sampleID, "_", time)) %>%
# Removing time columns
dplyr::select(-time) %>%
# Pivoting feature.name to the columns
pivot_wider(names_from = feature.name, values_from = feature) %>%
# Filtering out columns with only missing values (123 columns here)
select_if(~ !all(is.na(.)))
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_all, -group), paste0(out_path, "/identify_IDX_among_all_IDX_BL_features.csv"), row.names=FALSE)
# Saving the feature table
write.csv(dplyr::select(identify_IDX_among_all, c(sampleID, group)), paste0(out_path, "/identify_IDX_among_all_IDX_BL_outcomes.csv"), row.names=FALSE)
